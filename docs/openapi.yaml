openapi: 3.0.3
info:
<<<<<<< HEAD
  title: Contacts API (HW7)
  version: 1.0.0
servers:
  - url: https://nodejs-hw-mongodb-pfm6.onrender.com
tags:
=======
  title: Contacts API
  version: 1.0.0
  description: HW7 Swagger. Авторизація JWT. Контакти з пагінацією та фільтром favorite.
servers:
  - url: https://nodejs-hw-mongodb-pfm6.onrender.com
    description: Render prod
tags:
  - name: Auth
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a
  - name: Contacts

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PageParam:
      name: page
      in: query
<<<<<<< HEAD
      description: Номер страницы (начиная с 1)
=======
      description: Номер сторінки (починаючи з 1)
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a
      schema: { type: integer, minimum: 1, default: 1 }
    LimitParam:
      name: limit
      in: query
<<<<<<< HEAD
      description: Кол-во элементов на странице
=======
      description: Кількість елементів на сторінці
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
    FavoriteParam:
      name: favorite
      in: query
<<<<<<< HEAD
      description: Фильтр «избранные». Маппится на поле isFavourite в базе.
      schema: { type: boolean }

  schemas:
    ApiEnvelope:
=======
      description: Фільтр за обраними контактами
      schema: { type: boolean }

  schemas:
    ApiError:
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a
      type: object
      required: [status, message, data]
      properties:
<<<<<<< HEAD
        status: { type: string, enum: [success, error] }
        message: { type: string }
        data: {}
=======
        message: { type: string }
      required: [message]

    UserRef:
      type: object
      properties:
        id:
          type: string
          description: ObjectId власника
        email:
          type: string
          format: email
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a

    Contact:
      type: object
      required:
        - id
        - name
        - phoneNumber
        - isFavourite
        - contactType
        - userId
      properties:
        id:
          type: string
<<<<<<< HEAD
          description: Mongo ObjectId
        name:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
          nullable: true
        isFavourite:
          type: boolean
          default: false
        photo:
          type: string
          format: uri
          nullable: true
          description: URL изображения (Cloudinary)
        contactType:
          type: string
          enum: [work, home, personal]
          default: personal
        userId:
          type: string
          description: Владелец контакта (ObjectId User)
=======
          description: ObjectId
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
          description: Будь-який рядок номера телефону
        favorite:
          type: boolean
          default: false
        owner:
          $ref: '#/components/schemas/UserRef'
      required: [id, name, email, phone, favorite]
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a

    ContactCreate:
      type: object
      required: [name, phoneNumber]
      properties:
        name: { type: string }
<<<<<<< HEAD
        phoneNumber: { type: string }
        email: { type: string, format: email }
        isFavourite: { type: boolean }
        photo: { type: string, format: uri }
        contactType: { type: string, enum: [work, home, personal] }
        userId:
          type: string
          description: Передавайте только если нет авторизации и сервер ожидает userId в body

    ContactUpdate:
=======
        email: { type: string, format: email }
        phone: { type: string }
        favorite: { type: boolean, default: false }
      required: [name, email, phone]

    ContactUpdate:
      type: object
      description: Часткове оновлення контакту; передаємо лише ті поля, які змінюємо
      properties:
        name: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        favorite: { type: boolean }
      minProperties: 1

    ContactsListResponse:
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a
      type: object
      description: Передаём только изменяемые поля
      properties:
        name: { type: string }
        phoneNumber: { type: string }
        email: { type: string, format: email }
        isFavourite: { type: boolean }
        photo: { type: string, format: uri }
        contactType: { type: string, enum: [work, home, personal] }
      minProperties: 1

    ContactsListData:
      type: object
      required: [contacts, total, page, limit]
      properties:
        contacts:
          type: array
<<<<<<< HEAD
          items: { $ref: '#/components/schemas/Contact' }
        total: { type: integer }
        page: { type: integer }
        limit: { type: integer }

paths:
  /contacts:
    get:
      tags: [Contacts]
      summary: Получить список контактов с пагинацией и фильтром избранного
      # security: [ { bearerAuth: [] } ]  # включи, если защищено
=======
          items:
            $ref: '#/components/schemas/Contact'
        total:
          type: integer
          description: Загальна кількість контактів (з урахуванням фільтра)
        page:
          type: integer
        limit:
          type: integer
      required: [contacts, total, page, limit]

paths:
  /api/auth/login:
    post:
      tags: [Auth]
      summary: Логін
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
              required: [email, password]
      responses:
        '200':
          description: Успішний вхід
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
        '401':
          description: Невірні облікові дані
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }

  /api/contacts:
    get:
      tags: [Contacts]
      summary: Отримати всі контакти з пагінацією та фільтром favorite
      security: [ { bearerAuth: [] } ]
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/FavoriteParam'
      responses:
        '200':
<<<<<<< HEAD
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiEnvelope'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/ContactsListData' }
              examples:
                ok:
                  value:
                    status: success
                    message: Contacts list
                    data:
                      contacts:
                        - id: "6640d1f3aa11bb22cc33dd44"
                          name: "John Doe"
                          phoneNumber: "+1-202-555-0123"
                          email: "john@example.com"
                          isFavourite: true
                          photo: "https://res.cloudinary.com/demo/image/upload/v123/photo.jpg"
                          contactType: personal
                          userId: "663fa5a0e0e0e0e0e0e0e0e0"
                      total: 42
                      page: 1
                      limit: 20
        '401':
          description: Не авторизовано (если включена защита)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                unauth:
                  value: { status: error, message: "Not authorized", data: null }

    post:
      tags: [Contacts]
      summary: Создать контакт (multipart/form-data)
      # security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: { $ref: '#/components/schemas/ContactCreate' }
            encoding:
              name: { style: form }
              phoneNumber: { style: form }
              email: { style: form }
              isFavourite: { style: form }
              photo: { style: form }
              contactType: { style: form }
              userId: { style: form }
      responses:
        '201':
          description: Создано
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiEnvelope'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/Contact' }
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                badreq:
                  value: { status: error, message: "Validation error", data: { field: "name" } }
=======
          description: Успішний запит
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactsListResponse'
              examples:
                ok:
                  value:
                    contacts:
                      - id: "662f0a1f1c11111111111111"
                        name: "John Doe"
                        email: "john.doe@example.com"
                        phone: "+1-202-555-0123"
                        favorite: true
                        owner:
                          id: "662f09aa9b22222222222222"
                          email: "owner@example.com"
                    total: 42
                    page: 1
                    limit: 20
        '401':
          description: Не авторизовано
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }

    post:
      tags: [Contacts]
      summary: Створити контакт
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ContactCreate' }
            examples:
              create:
                value:
                  name: "Jane Smith"
                  email: "jane@example.com"
                  phone: "+380501112233"
                  favorite: false
      responses:
        '201':
          description: Створено
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Contact' }
        '400':
          description: Валідаційна помилка
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a
        '401':
          description: Не авторизовано
          content:
            application/json:
<<<<<<< HEAD
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                unauth:
                  value: { status: error, message: "Not authorized", data: null }

  /contacts/{contactId}:
    get:
      tags: [Contacts]
      summary: Получить контакт по id
      # security: [ { bearerAuth: [] } ]
      parameters:
        - name: contactId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiEnvelope'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/Contact' }
        '401':
          description: Не авторизовано
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                unauth:
                  value: { status: error, message: "Not authorized", data: null }
        '404':
          description: Не найдено
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                notfound:
                  value: { status: error, message: "Not found", data: null }

    patch:
      tags: [Contacts]
      summary: Частично обновить контакт (multipart/form-data)
      # security: [ { bearerAuth: [] } ]
=======
              schema: { $ref: '#/components/schemas/ApiError' }

  /api/contacts/{contactId}:
    patch:
      tags: [Contacts]
      summary: Часткове оновлення контакту
      security: [ { bearerAuth: [] } ]
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a
      parameters:
        - name: contactId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
<<<<<<< HEAD
          multipart/form-data:
            schema: { $ref: '#/components/schemas/ContactUpdate' }
      responses:
        '200':
          description: Обновлено
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiEnvelope'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/Contact' }
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                badreq:
                  value: { status: error, message: "Validation error", data: { field: "email" } }
=======
          application/json:
            schema: { $ref: '#/components/schemas/ContactUpdate' }
            examples:
              changeFavorite:
                value: { favorite: true }
              changeFields:
                value: { name: "New Name", phone: "+380671234567" }
      responses:
        '200':
          description: Оновлено
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Contact' }
        '400':
          description: Валідаційна помилка
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a
        '401':
          description: Не авторизовано
          content:
            application/json:
<<<<<<< HEAD
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                unauth:
                  value: { status: error, message: "Not authorized", data: null }
        '404':
          description: Не найдено
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                notfound:
                  value: { status: error, message: "Not found", data: null }

    delete:
      tags: [Contacts]
      summary: Удалить контакт
      # security: [ { bearerAuth: [] } ]
=======
              schema: { $ref: '#/components/schemas/ApiError' }
        '404':
          description: Не знайдено
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }

  /api/contacts/{contactId}/favorite:
    patch:
      tags: [Contacts]
      summary: Оновити тільки поле favorite
      security: [ { bearerAuth: [] } ]
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a
      parameters:
        - name: contactId
          in: path
          required: true
          schema: { type: string }
<<<<<<< HEAD
      responses:
        '200':
          description: Удалено
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiEnvelope'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
                        description: Может возвращаться удалённый объект или null
              examples:
                ok:
                  value: { status: success, message: "Deleted", data: null }
=======
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                favorite: { type: boolean }
              required: [favorite]
            examples:
              setFav:
                value: { favorite: true }
      responses:
        '200':
          description: Оновлено
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Contact' }
        '400':
          description: Валідаційна помилка
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a
        '401':
          description: Не авторизовано
          content:
            application/json:
<<<<<<< HEAD
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                unauth:
                  value: { status: error, message: "Not authorized", data: null }
        '404':
          description: Не найдено
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                notfound:
                  value: { status: error, message: "Not found", data: null }
=======
              schema: { $ref: '#/components/schemas/ApiError' }
        '404':
          description: Не знайдено
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
>>>>>>> 8c4533ec47c8a7cc9397cff9d986f7085696bb9a
