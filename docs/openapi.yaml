openapi: 3.0.3
info:
  title: Contacts API (HW7)
  version: 1.0.0
servers:
  - url: https://nodejs-hw-mongodb-pfm6.onrender.com
tags:
  - name: Contacts

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PageParam:
      name: page
      in: query
      description: Номер страницы (>=1)
      schema: { type: integer, minimum: 1, default: 1 }
    PerPageParam:
      name: perPage
      in: query
      description: Кол-во элементов на странице
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
    IsFavouriteParam:
      name: isFavourite
      in: query
      description: Фильтр «избранные»
      schema: { type: boolean }
    TypeParam:
      name: type
      in: query
      description: Фильтр по типу контакта
      schema:
        type: string
        enum: [work, home, personal]
    SortByParam:
      name: sortBy
      in: query
      description: Поле сортировки
      schema:
        type: string
        enum: [name, email, phoneNumber, contactType, createdAt, updatedAt]
    SortOrderParam:
      name: sortOrder
      in: query
      description: Направление сортировки
      schema:
        type: string
        enum: [asc, desc]
        default: asc

  schemas:
    ApiEnvelope:
      type: object
      required: [status, message, data]
      properties:
        status: { type: string, enum: [success, error] }
        message: { type: string }
        data: {}

    Contact:
      type: object
      required: [id, name, phoneNumber, isFavourite, contactType, userId]
      properties:
        id: { type: string, description: Mongo ObjectId }
        name: { type: string }
        phoneNumber: { type: string }
        email: { type: string, format: email, nullable: true }
        isFavourite: { type: boolean, default: false }
        photo:
          type: string
          format: uri
          nullable: true
          description: URL изображения (например, Cloudinary)
        contactType:
          type: string
          enum: [work, home, personal]
          default: personal
        userId: { type: string, description: Владелец контакта (ObjectId User) }

    # Тело создания: photo — бинарный файл; userId не передаём
    ContactCreateForm:
      type: object
      required: [name, phoneNumber]
      properties:
        name: { type: string }
        phoneNumber: { type: string }
        email: { type: string, format: email }
        isFavourite: { type: boolean }
        contactType: { type: string, enum: [work, home, personal] }
        photo:
          type: string
          format: binary
          description: Файл изображения (multipart/form-data)
      additionalProperties: false

    # Тело обновления: любые поля; photo — бинарный файл
    ContactUpdateForm:
      type: object
      properties:
        name: { type: string }
        phoneNumber: { type: string }
        email: { type: string, format: email }
        isFavourite: { type: boolean }
        contactType: { type: string, enum: [work, home, personal] }
        photo:
          type: string
          format: binary
          description: Новый файл изображения (multipart/form-data)
      minProperties: 1
      additionalProperties: false

    # Пагинация как в модуле 4
    ContactsListData:
      type: object
      required:
        - items
        - page
        - perPage
        - totalItems
        - totalPages
        - hasPreviousPage
        - hasNextPage
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Contact' }
        page: { type: integer }
        perPage: { type: integer }
        totalItems: { type: integer }
        totalPages: { type: integer }
        hasPreviousPage: { type: boolean }
        hasNextPage: { type: boolean }

paths:
  /contacts:
    get:
      tags: [Contacts]
      summary: Получить список контактов (пагинация/фильтры/сортировка)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/IsFavouriteParam'
        - $ref: '#/components/parameters/TypeParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiEnvelope'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/ContactsListData' }
              examples:
                ok:
                  value:
                    status: success
                    message: Contacts list
                    data:
                      items:
                        - id: "6640d1f3aa11bb22cc33dd44"
                          name: "John Doe"
                          phoneNumber: "+1-202-555-0123"
                          email: "john@example.com"
                          isFavourite: true
                          photo: "https://res.cloudinary.com/demo/image/upload/v123/photo.jpg"
                          contactType: personal
                          userId: "663fa5a0e0e0e0e0e0e0e0e0"
                      page: 1
                      perPage: 20
                      totalItems: 42
                      totalPages: 3
                      hasPreviousPage: false
                      hasNextPage: true
        '401':
          description: Не авторизовано
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                unauth:
                  value: { status: error, message: "Not authorized", data: null }

    post:
      tags: [Contacts]
      summary: Создать контакт (multipart/form-data, с фото)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: { $ref: '#/components/schemas/ContactCreateForm' }
      responses:
        '201':
          description: Создано
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiEnvelope'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/Contact' }
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                badreq:
                  value: { status: error, message: "Validation error", data: { field: "name" } }
        '401':
          description: Не авторизовано
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                unauth:
                  value: { status: error, message: "Not authorized", data: null }

  /contacts/{contactId}:
    get:
      tags: [Contacts]
      summary: Получить контакт по id
      parameters:
        - name: contactId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiEnvelope'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/Contact' }
        '401':
          description: Не авторизовано
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                unauth:
                  value: { status: error, message: "Not authorized", data: null }
        '404':
          description: Не найдено
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                notfound:
                  value: { status: error, message: "Not found", data: null }

    patch:
      tags: [Contacts]
      summary: Частично обновить контакт (multipart/form-data)
      parameters:
        - name: contactId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: { $ref: '#/components/schemas/ContactUpdateForm' }
      responses:
        '200':
          description: Обновлено
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiEnvelope'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/Contact' }
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                badreq:
                  value: { status: error, message: "Validation error", data: { field: "email" } }
        '401':
          description: Не авторизовано
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                unauth:
                  value: { status: error, message: "Not authorized", data: null }
        '404':
          description: Не найдено
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiEnvelope' }
              examples:
                notfound:
                  value: { status: error, message: "Not found", data: null }

    delete:
      tags: [Contacts]
      summary: Удалить контакт
      parameters:
        - name: contactId
          in: path
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Удалено, без тела
